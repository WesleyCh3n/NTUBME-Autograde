#!/bin/bash

ARGS=$#
PARAMS=""
isLab= false
while (( "$#" )); do
    case "$1" in
        -Y|--yaml)
            FILE=$2
            shift
            ;;
	-L|--labyaml)
	    isLab= true
            FILE=$2
	    shift
	    ;;
        -n|--name)
            HWNUM=$2
            shift
            ;;
        -h|--help)
            printf "ga [-Y] [input-file]\n-h,--help for help\n"
            shift
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) #reserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

info() {
    echo "[${CYAN}INFO${NC}]" "$@"
}

warn() {
    echo "[${RED}ERROR${NC}]" "$@"
}

setup_color() {
    RED=$(printf '\033[0;31m')
    CYAN=$(printf '\033[0;36m')
    ORANGE=$(printf '\033[0;33m')
    NC=$(printf '\033[0m')
}

get_template() {
    info "autograde-Makefile"
    curl -o ./autograde-Makefile -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/autograde-Makefile.template
    info "gtest.cpp"
    curl -o ./gtest.cpp -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/gtest.cpp.template
    info "score.py"
    curl -o ./score.py -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/score.py.template
    if [[ $isLab==true ]];then
	curl -o ./score.py -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/score_lab.py.template
    else
        curl -o ./score.py -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/score.py.template
    fi
}

parse_yml() {
    # HW name
    HW=$(yq r ${FILE} "Autograde.Homework")
    NUM=$(echo $HW | tr -dc '0-9')
    PRO=$(echo $HW | tr -d '0-9')
    HW_NUM=$(printf "%02d%s" $NUM $PRO)
    echo "Homework number: ${HW_NUM^^}"

    # Tar files
    L_TAR=$(yq r ${FILE} -l "Autograde.AdditionalTar")
    if [[ $L_TAR == 0 ]];then
        echo "no additional file included"
    else
        TARS=($(yq r ${FILE} "Autograde.AdditionalTar[*]"))
        echo "Additional files: ${TARS[@]}"
    fi

    # Variable Type
    L_TYPE=$(yq r ${FILE} -l "Autograde.VariableType")
    if [[ $L_TYPE == 0 ]];then
        echo "no variable declared"
    else
        TYPES=($(yq r ${FILE} "Autograde.VariableType[*]"))
        echo "Total Variables: ${TYPES[@]}"
    fi

    # Google Test Variable
    ## Length of the test
    L_TEST=$(yq r ${FILE} -l "Autograde.Test")
    ## INPUT
    if [[ $L_TEST == 0 ]];then
        echo "There is no test"
    else
        echo "There are $L_TEST tests"
        INPUTS=$(yq r ${FILE} "Autograde.Test[*].input")
        # echo $INPUTS
        if [[ $INPUTS == "" ]];then
            echo "There is no inputs for tests."
            FINAL_INPUT=""
        else
            FINAL_INPUT=""
            for((i=0; i<$((L_TEST)); i++));do
                INPUT=($(yq r ${FILE} "Autograde.Test[$((i))].input[*]"|tr '\n' ' '))

                if [[ $INPUT == "" ]];then
                    FINAL_INPUT+=";"
                else
                    FINAL_INPUT+="${INPUT[@]};"
                fi
            done
        fi
    fi
    echo "Inputs: $FINAL_INPUT"

    for((i=0; i<$((L_TEST)); i++));do
        TEST_ANSWER=""
        L_ANSWER=$(yq r ${FILE} -l "Autograde.Test[$((i))].answer")
        for((j=0; j<$((L_ANSWER)); j++));do
            L=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].L")
            L=$(echo $L | sed "s/ans/answer/g")
            op=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].op")
            R=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].R")
            TEST_ANSWER+="$L$op$R\n"
        done
        printf "Testing $((i+1))\n$TEST_ANSWER"
    done
}

makefile() {
    sed -i "s/{{HW_NUM}}/${HW_NUM^^}/" "$@"
    sed -i "s/{{N_TEST}}/$((L_TEST))/" "$@"
    sed -i "s/{{INPUTS}}/\"${FINAL_INPUT}\"/" "$@"
}

gtest() {
    # Decalre ansers with type in gtest.cpp
    for((i=0; i<$((L_TYPE)); i++));do
        sed -i "$((i+3))a extern $(echo ${TYPES[i]}|tr -d "'") answer$((i+1));" "$@"
    done

    for((i=0; i<$((L_TEST)); i++));do
        FUNC=""
        L_ANSWER=$(yq r ${FILE} -l "Autograde.Test[$((i))].answer")
        for((j=0; j<$((L_ANSWER)); j++));do
            L=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].L")
            L=$(echo $L | sed "s/ans/answer/g")
            op=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].op")
            R=$(yq r ${FILE} "Autograde.Test[$((i))].answer[$((j))].R")
            if [[ ${op} == "=" ]];then
                FUNC+="\tASSERT_EQ(${L}, ${R});\n"

            elif [[ ${op} == ">" ]];then
                FUNC+="\tASSERT_GT(${L}, ${R});\n"

            elif [[ ${op} == "<" ]];then
                FUNC+="\tASSERT_LT(${L}, ${R});\n"

            elif [[ ${op} == "!=" ]];then
                FUNC+="\tASSERT_NE(${L}, ${R});\n"

            elif [[ ${op} == ">=" ]];then
                FUNC+="\tASSERT_GE(${L}, ${R});\n"

            elif [[ ${op} == "<=" ]];then
                FUNC+="\tASSERT_LE(${L}, ${R});\n"

            elif [[ ${op} == "&=" ]];then
                FUNC+="\tASSERT_STREQ(${L}, \"${R}\");\n"

            elif [[ ${op} == "&?" ]];then
                FUNC+="\tASSERT_STRNE(${L}, \"${R}\");\n"
            fi
        done
        STR="\nTEST(GoogleTest, test$((i+1))){\n${FUNC}}"
        echo -e ${STR} >> "$@"
    done
}

create(){
    CONTENT="---\n";
    CONTENT+="Autograde:\n";
    CONTENT+="  Homework: $HWNUM\n"
    CONTENT+="  AdditionalTar: []\n"
    CONTENT+="  VariableType: []\n"
    CONTENT+="  Test:\n"
    CONTENT+="    - input: []\n"
    CONTENT+="      answer:\n"
    CONTENT+="        - L: \n"
    CONTENT+="          op: ''\n"
    CONTENT+="          R: "
    echo -e "$CONTENT" > $@

}

{
    setup_color
    if [[ $ARGS != 0 ]];then
        if [[ $FILE != "" ]];then
            info "getting latest template"
            get_template
            info "parsing yml"
            parse_yml
            info "creating autograde-Makefile"
            makefile "./autograde-Makefile"
            info "creating gtest.cpp"
            gtest "./gtest.cpp"
            info "tar autograde.tar"
            tar cf autograde.tar ./gtest.cpp ./score.py ${TARS[@]}
            rm ./gtest.cpp ./score.py
        elif [[ $HWNUM != "" ]];then
            FILENAME="answers-HW0${HWNUM^^}.yml"
            info "create $FILENAME"
            if [[ -f "./$FILENAME" ]]; then
                warn "$FILENAME exists. Abort..."
            else
                create $FILENAME
            fi
        fi
    else
        info "generate yaml sample"
        if [[ -f "./answers.yml" ]]; then
            warn "answers.yml exists. Abort..."
        else
            create "./answers.yml"
        fi
    fi
}

