#!/bin/bash

# ./generate -hw 03c -a 2 -t 2 -s "< < !=" -i ""
PARAMS=""
while (( "$#" )); do
    case "$1" in
        -hw|--hw)
            HW_NUM=$2
            shift
            ;;
        -a|--num-ans)
            N_ANS=$2
            shift
            ;;
        -t|--num-test)
            N_TEST=$2
            shift
            ;;
        -s|--sign)
            SIGN=$2
            shift
            ;;
        -i|--inputs)
            INPUTS=$2
            shift
            ;;
        tar|tar)
            tar cf autograde.tar ./gtest.cpp ./score.py
            shift
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) #reserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done
# eval set -- "$PARAMS"


info() {
    echo "[${CYAN}INFO${NC}]" "$@"
}

setup_color() {
    RED=$(printf '\033[0;31m')
    CYAN=$(printf '\033[0;36m')
    ORANGE=$(printf '\033[0;33m')
    NC=$(printf '\033[0m')
}

get_template() {
    info "autograde-Makefile"
    curl -o ./autograde-Makefile -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/autograde-Makefile.template
    info "gtest.cpp.template"
    curl -o ./gtest.cpp -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/gtest.cpp.template
    info "score.py"
    curl -o ./score.py -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/score.py.template
}

gtest() {
    for(( i=1; i<=$((N_ANS)); i++))
    do
        sed -i "$((i+1))a extern {TYPE} answer${i};" ./gtest.cpp
    done

    FUNC=""
    IFS=' '
    read -a STRARRAY <<< "$SIGN"
    for(( i=0; i<${#STRARRAY[@]}; i++))
    do
        if [[ ${STRARRAY[i]} == "=" ]]; then
            FUNC+="\tASSERT_EQ(answer${i+1}, {{NUM}});\n"
        elif [[ ${STRARRAY[i]} == "<" ]]; then
            FUNC+="\tASSERT_LT(answer${i+1}, {{NUM}});\n"
        elif [[ ${STRARRAY[i]} == ">" ]]; then
            FUNC+="\tASSERT_GT(answer${i+1}, {{NUM}});\n"
        elif [[ ${STRARRAY[i]} == "<=" ]]; then
            FUNC+="\tASSERT_LE(answer${i+1}, {{NUM}});\n"
        elif [[ ${STRARRAY[i]} == ">=" ]]; then
            FUNC+="\tASSERT_GE(answer${i+1}, {{NUM}});\n"
        elif [[ ${STRARRAY[i]} == "!=" ]]; then
            FUNC+="\tASSERT_NE(answer${i+1}, {{NUM}});\n"
        fi
    done

    for(( i=1; i<=$((N_TEST)); i++))
    do
        STR="\nTEST(GoogleTest, test${i}){\n${FUNC}}"
        echo -e ${STR} >> ./gtest.cpp
    done
}

makefile() {
    sed -i "s/{{HW_NUM}}/${HW_NUM^^}/" ./autograde-Makefile
    sed -i "s/{{N_TEST}}/$((N_TEST))/" ./autograde-Makefile
    sed -i "s/{{INPUTS}}/\"${INPUTS}\"/" ./autograde-Makefile
}
{
    setup_color
    if [[ $HW_NUM != "" ]];then
        info "getting template"
        get_template
        info "creating autograde-Makefile"
        makefile
        info "creating gtest.cpp"
        gtest
        info "rm autograde.tar if exist"
        rm -f autograde.tar
    fi
}
