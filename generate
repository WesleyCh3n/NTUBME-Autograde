#!/bin/bash

PARAMS=""
while (( "$#" )); do
    case "$1" in
        -hw|--hw)
            HW_NUM=$2
            shift
            ;;
        -t|--type)
            TYPE_ANS=$2
            shift
            ;;
        -i|--input)
            INPUTS=$2
            shift
            ;;
        -ans|--answer)
            ANSWERS=$2
            shift
            ;;
        -Y|--yaml)
            FILE=$2
            HW_NUM="$(sed -n -e "s/HW_NUM: //p" ${FILE})"
            TYPE_ANS="$(sed -n -e 's/TYPE_ANS: //p' ${FILE})"
            INPUTS="$(sed -n -e 's/INPUTS: //p' ${FILE})"
            ANSWERS="$(sed -n -e 's/ANSWERS: //p' ${FILE})"
            shift
            ;;
        -h|--help)
            echo -e "generate [-hw] [-t] [-i] [-ans]\ntype -h --help for help\nExample:\n\
generate -hw 02a \
-t \"int float float\" \
-i \"12 13 14,53 53 93\" \
-ans \"1=2;2!=23;3<=-12 1=12;2>21;3!=1212\"
                "
            shift
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) #reserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done
# eval set -- "$PARAMS"


info() {
    echo "[${CYAN}INFO${NC}]" "$@"
}

setup_color() {
    RED=$(printf '\033[0;31m')
    CYAN=$(printf '\033[0;36m')
    ORANGE=$(printf '\033[0;33m')
    NC=$(printf '\033[0m')
}

get_template() {
    info "autograde-Makefile"
    curl -o ./autograde-Makefile -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/autograde-Makefile.template
    info "gtest.cpp.template"
    curl -o ./gtest.cpp -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/gtest.cpp.template
    info "score.py"
    curl -o ./score.py -fsSL https://github.com/WesleyCh3n/NTUBME-Autograde/raw/master/template/score.py.template
}

gtest() {
    # Decalre ansers with type in gtest.cpp
    IFS=',' read -ra TYPE_ARR <<< "${TYPE_ANS}"
    i=1
    for TYPE in "${TYPE_ARR[@]}"; do
        sed -i "$((i+1))a extern ${TYPE} answer${i};" ./gtest.cpp
        i=$((i+1))
    done

    # processing right answer
    NUM=0
    IFS=';' read -ra ANS_ARR <<< "$ANSWERS"
    for word in "${ANS_ARR[@]}"; do
        FUNC=""
        IFS=',' read -ra ADDR <<< "$word"
        for i in "${ADDR[@]}"; do
            if [[ ${i} =~ ^[0-9]=[-*0-9a-zA-Z] ]];then
                IFS='=' read -ra arr <<< "$i"
                FUNC+="\tASSERT_EQ(answer${arr[0]}, ${arr[1]});\n"

            elif [[ ${i} =~ ^[0-9]\>[-*0-9a-zA-Z] ]];then
                IFS='>' read -ra arr <<< "$i"
                FUNC+="\tASSERT_GT(answer${arr[0]}, ${arr[1]});\n"

            elif [[ ${i} =~ ^[0-9]\<[-*0-9a-zA-Z] ]];then
                IFS='<' read -ra arr <<< "$i"
                FUNC+="\tASSERT_LT(answer${arr[0]}, ${arr[1]});\n"

            elif [[ ${i} =~ ^[0-9]!=[-*0-9a-zA-Z] ]];then
                FUNC+="\tASSERT_NE(answer${i:0:1}, ${i:3:${#i}});\n"

            elif [[ ${i} =~ ^[0-9]\>=[-*0-9a-zA-Z] ]];then
                FUNC+="\tASSERT_GE(answer${i:0:1}, ${i:3:${#i}});\n"

            elif [[ ${i} =~ ^[0-9]\<=[-*0-9a-zA-Z] ]];then
                FUNC+="\tASSERT_LE(answer${i:0:1}, ${i:3:${#i}});\n"

            elif [[ ${i} =~ ^[0-9]\&=[0-9a-zA-Z] ]];then
                FUNC+="\tASSERT_STREQ(answer${i:0:1}, ${i:3:${#i}});\n"

            elif [[ ${i} =~ ^[0-9]\&\?[0-9a-zA-Z] ]];then
                FUNC+="\tASSERT_STRNE(answer${i:0:1}, ${i:3:${#i}});\n"
            fi
        done
        STR="\nTEST(GoogleTest, test${NUM}){\n${FUNC}}"
        echo -e ${STR} >> ./gtest.cpp
        NUM=$((NUM+1))
    done
}

makefile() {
    sed -i "s/{{HW_NUM}}/${HW_NUM^^}/" ./autograde-Makefile
    sed -i "s/{{N_TEST}}/$((NUM))/" ./autograde-Makefile
    sed -i "s/{{INPUTS}}/\"${INPUTS}\"/" ./autograde-Makefile
}
{
    setup_color
    if [ $# != 0 ];then
        if [[ $FILE == "" ]];then
            info "getting template"
            get_template
            info "creating gtest.cpp"
            gtest
            info "creating autograde-Makefile"
            makefile
            info "tar autograde.tar"
            tar cf autograde.tar ./gtest.cpp ./score.py
            rm ./gtest.cpp ./score.py
        fi

        if [[ $FILE != "" ]];then
            info "getting template"
            get_template
            info "creating gtest.cpp"
            gtest
            info "creating autograde-Makefile"
            makefile
            info "tar autograde.tar"
            tar cf autograde.tar ./gtest.cpp ./score.py
            rm ./gtest.cpp ./score.py
        fi
    else
        info "generate yaml sample"
        echo -e "\
HW_NUM: 01a
TYPE_ANS: int,float
INPUTS: 22,43;123,43
ANSWERS: 1=23,2!=32;1<9,2<=144" > answers.yaml

    fi
}
